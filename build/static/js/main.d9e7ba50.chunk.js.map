{"version":3,"sources":["firebase/firebase.js","redux/actions/auth.js","redux/actions/dashboard.type.js","redux/constants.js","redux/reducers/auth.js","redux/reducers/dashboard.reducer.js","redux/reducers/index.js","components/protected/ProtectedRoute.js","utils/scroll-to-top.jsx","components/loader/loader.style.js","components/loader/loader.component.jsx","App.js","serviceWorker.js","index.js","configureStore.js"],"names":["myFirebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","googleProvider","firestore","auth","GoogleAuthProvider","setCustomParameters","prompt","requestLogin","type","LOGIN_REQUEST","receiveLogin","user","LOGIN_SUCCESS","loginError","error","LOGIN_FAILURE","receiveLogout","LOGOUT_SUCCESS","requestSignUp","SIGN_UP_REQUEST","receiveSignUp","SIGN_UP_SUCCESS","signUpError","SIGN_UP_FAILURE","loginUser","email","password","dispatch","signInWithEmailAndPassword","then","catch","console","log","logoutUser","LOGOUT_REQUEST","signOut","LOGOUT_FAILURE","logoutError","verifyAuth","VERIFY_REQUEST","onAuthStateChanged","VERIFY_SUCCESS","signUpUser","createUserWithEmailAndPassword","signInWithGoogle","signInWithPopup","selectTakeScan","TAKE_SCAN","selectDoctor","DOCTOR","selectHistory","SCAN_HISTORY","selectDiseaseBook","DISEASE_BOOK","selectFeedback","FEEDBACK","INITIAL_STATE","isLoggingIn","isLoggingOut","isVerifying","isAuthenticated","loginErrorMessage","isSigningUp","signedUp","signUpErrorMessage","userReducer","state","action","message","verifyingError","screen","dashboardReducer","combineReducers","dashboard","ProtectedRoute","Component","component","rest","render","props","to","pathname","from","location","ScrollToTop","useLocation","useEffect","window","scrollTo","LoaderWrapper","styled","main","LoaderContainer","div","LoaderCircle","Loader","document","querySelector","gsap","children","duration","yoyo","repeat","repeatDelay","opacity","y","ease","Power3","easeOut","stagger","id","style","marginRight","Home","lazy","Welcome","Dashboard","connect","fallback","path","exact","Boolean","hostname","match","store","persistedState","createStore","rootReducer","applyMiddleware","thunkMiddleware","configureStore","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oeAeaA,G,YAAaC,IAASC,cAXZ,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBAONC,GAHEX,EAAWY,YAGI,IAAIX,IAASY,KAAKC,oBAChDH,EAAeI,oBAAoB,CAACC,OAAQ,mB,WCJtCC,EAAe,WACjB,MAAO,CACHC,KAAMC,MAIRC,EAAe,SAAAC,GACjB,MAAO,CACHH,KAAMI,IACND,SAIFE,EAAa,SAAAC,GACf,MAAM,CACFN,KAAMO,IACND,UAUFE,EAAgB,WAClB,MAAO,CACHR,KAAMS,MAuBRC,EAAgB,WACpB,MAAO,CACHV,KAAMW,MAINC,EAAgB,SAAAT,GACpB,MAAO,CACHH,KAAMa,IACNV,SAIAW,EAAc,SAAAR,GAClB,MAAO,CACHN,KAAMe,IACNT,UAIOU,EAAY,SAACC,EAAOC,GAAR,OAAqB,SAAAC,GAC1CA,EAASpB,KACTjB,EACKa,OACAyB,2BAA2BH,EAAOC,GAClCG,MAAK,SAAAlB,GACFgB,EAASjB,EAAaC,OAEzBmB,OAAM,SAAAhB,GACHiB,QAAQC,IAAIlB,GACZa,EAASd,EAAWC,SAInBmB,EAAa,kBAAM,SAAAN,GAC5BA,EAjEO,CACHnB,KAAM0B,MAiEV5C,EACKa,OACAgC,UACAN,MAAK,WACFF,EAASX,QAEZc,OAAM,SAAAhB,GACHa,EA9DQ,SAAAb,GAChB,MAAO,CACHN,KAAM4B,IACNtB,SA2DauB,CAAYvB,SAIpBwB,EAAa,kBAAM,SAAAX,GAC5BA,EA3DO,CACHnB,KAAM+B,MA2DVjD,EAAWa,OAAOqC,oBAAmB,SAAA7B,GACpB,OAATA,GACAgB,EAASjB,EAAaC,IAE1BgB,EA1DG,CACHnB,KAAMiC,WA6DDC,EAAa,SAACjB,EAAOC,GAAR,OAAqB,SAAAC,GAC3CA,EAAST,KACT5B,EAAWa,OAAOwC,+BAA+BlB,EAAOC,GAAUG,MAAK,SAAAlB,GACnEgB,EAASP,EAAcT,IACvBgB,EAASjB,EAAaC,OACvBmB,OAAM,SAAAhB,GACLa,EAASL,EAAYR,SAIhB8B,EAAmB,SAACpC,GAAD,OAAU,SAAAmB,GACzB,WAATnB,GACAmB,EAAST,KACT5B,EAAWa,OAAO0C,gBAAgB5C,GAAgB4B,MAAK,SAAAlB,GACnDgB,EAASP,EAAcT,OACxBmB,OAAM,SAAAhB,GACLa,EAASL,EAAYR,SAGzBa,EAASpB,KACTjB,EAAWa,OAAO0C,gBAAgB5C,GAAgB4B,MAAK,SAAAlB,GACnDgB,EAASX,QACVc,OAAM,SAAAhB,GACLa,EAASd,EAAWC,UC/GnBgC,EAAiB,SAAAnB,GAC1BA,EA/BO,CACHnB,KAAMuC,OAiCDC,EAAe,SAAArB,GACxBA,EA7BO,CACHnB,KAAMyC,OA+BDC,EAAgB,SAAAvB,GACzBA,EA3BO,CACHnB,KAAM2C,OA6BDC,EAAoB,SAAAzB,GAC7BA,EAzBO,CACHnB,KAAM6C,OA2BDC,EAAiB,SAAA3B,GAC1BA,EAvBO,CACHnB,KAAM+C,Q,+BC/Bd,giBAAO,IAAM9C,EAAgB,gBAChBG,EAAgB,gBAChBG,EAAgB,gBAChBmB,EAAiB,iBACjBjB,EAAiB,iBACjBmB,EAAiB,iBACjBG,EAAiB,iBACjBE,EAAiB,iBAEjBtB,EAAkB,kBAClBE,EAAkB,kBAClBE,EAAkB,kBAGlBwB,EAAY,YACZE,EAAS,SACTE,EAAe,eACfE,EAAe,eACfE,EAAW,Y,gNCJlBC,EAAgB,CAClBC,aAAa,EACbC,cAAc,EACdC,aAAa,EACb9C,YAAY,EACZwB,aAAa,EACbuB,iBAAiB,EACjBjD,KAAM,GACNkD,kBAAmB,GACnBC,aAAa,EACbxC,aAAa,EACbyC,UAAU,EACVC,mBAAoB,IA2DTC,EAxDK,WAAoC,IAAnCC,EAAkC,uDAA1BV,EAAeW,EAAW,uCACnD,OAAQA,EAAO3D,MACX,KAAKC,IACD,OAAO,2BACAyD,GADP,IACcT,aAAa,EAAM5C,YAAY,IAEjD,KAAKD,IACD,OAAO,2BACFsD,GADL,IACWT,aAAa,EAAOG,iBAAiB,EAC5CjD,KAAMwD,EAAOxD,OAErB,KAAKI,IACD,OAAO,2BACAmD,GADP,IACcT,aAAa,EAAOG,iBAAiB,EAAO/C,YAAY,EAAMgD,kBAAmBM,EAAOrD,MAAMsD,UAEhH,KAAKlC,IACD,OAAO,2BACAgC,GADP,IACcR,cAAc,EAAMrB,aAAa,EAAO2B,mBAAoB,GAAIH,kBAAmB,KAErG,KAAK5C,IACD,OAAO,2BACAiD,GADP,IACcR,cAAc,EAAOE,iBAAiB,EAAOjD,KAAM,GAAIqD,mBAAoB,GAAIH,kBAAmB,KAEpH,KAAKzB,IACD,kCACO8B,GADP,IACcR,cAAc,EAAOrB,aAAa,IAEpD,KAAKE,IACD,OAAO,2BACA2B,GADP,IAEIP,aAAa,EACbU,gBAAgB,IAExB,KAAK5B,IACD,OAAO,2BACAyB,GADP,IAEIP,aAAa,IAErB,KAAKxC,IACD,OAAO,2BACF+C,GADL,IACYJ,aAAa,EAAOC,UAAU,IAE9C,KAAK1C,IACD,OAAO,2BACF6C,GADL,IACYJ,aAAa,EAAOxC,aAAa,EAAOyC,UAAU,IAElE,KAAKxC,IACD,OAAO,2BACF2C,GADL,IACYJ,aAAa,EAAOC,UAAU,EAAOzC,aAAa,EAAM0C,mBAAoBG,EAAOrD,MAAMsD,UAEzG,QACI,OAAOF,IC9EbV,EAAgB,CAClBc,OAAS,aA8BEC,EA3BU,WAAyC,IAAxCL,EAAuC,sEAA3BV,GAAgBW,EAAW,uCAC7D,OAAQA,EAAO3D,MACX,KAAKuC,IACD,OAAO,2BACHmB,GADJ,IACWI,OAAQ,cAEvB,KAAKrB,IACD,OAAO,2BACAiB,GADP,IACcI,OAAQ,cAE1B,KAAKnB,IACD,OAAO,2BACAe,GADP,IACcI,OAAQ,iBAE1B,KAAKjB,IACD,OAAO,2BACAa,GADP,IACcI,OAAQ,iBAE1B,KAAKf,IACD,OAAO,2BACAW,GADP,IACcI,OAAQ,aAE1B,QACI,OAAOJ,ICzBJM,cAAgB,CAAErE,OAAMsE,c,yBCuBxBC,EAxBQ,SAAC,GAAD,IACgBC,EADhB,EACKC,UACAhB,EAFL,EAEKA,gBACAD,EAHL,EAGKA,YACGkB,EAJR,oEAMnB,kBAAC,IAAD,iBACQA,EADR,CAEIC,OAAQ,SAAAC,GAAK,OACTpB,EACI,8BACAC,EACA,kBAACe,EAAcI,GAEf,kBAAC,IAAD,CACIC,GAAI,CACAC,SAAU,WACVf,MAAO,CAAEgB,KAAMH,EAAMI,kBCjB9B,SAASC,IAAe,IAC3BH,EAAaI,cAAbJ,SAMR,OAJAK,qBAAU,WACNC,OAAOC,SAAS,EAAG,KACpB,CAACP,IAEG,K,0dCRJ,IAAMQ,EAAgBC,IAAOC,KAAV,KAQbC,EAAkBF,IAAOG,IAAV,KAIfC,EAAeJ,IAAOG,IAAV,K,eCUVE,EApBA,WAMX,OAJAT,qBAAU,WACN,IAAMS,EAASC,SAASC,cAAc,WACtCC,IAAKhB,KAAKa,EAAOI,SAAU,CAACC,SAAU,GAAIC,MAAM,EAAMC,QAAS,EAAGC,YAAa,EAAGC,QAAS,EAAGC,GAAI,GAAIC,KAAMC,IAAOC,QAASC,QAAS,SAGrI,kBAACpB,EAAD,KACI,kBAACG,EAAD,CAAiBkB,GAAG,UAChB,kBAAChB,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,MACA,kBAACA,EAAD,CAAciB,MAAO,CAACC,YAAa,QCR7CC,EAAOC,gBAAK,kBAAM,gCAClBC,EAAUD,gBAAK,kBAAM,gCACrBE,EAAYF,gBAAK,kBAAM,gCA6BdG,mBAPf,SAAyBnD,GACrB,MAAO,CACHN,gBAAiBM,EAAM/D,KAAKyD,gBAC5BD,YAAaO,EAAM/D,KAAKwD,eAIjB0D,EA1Bf,YAA8C,IAAhCzD,EAA+B,EAA/BA,gBAAiBD,EAAc,EAAdA,YAC3B,OAAO,oCACP,kBAAC,WAAD,CAAU2D,SAAU,kBAAC,EAAD,OACpB,kBAAClC,EAAD,MACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmC,KAAK,IAAIC,OAAK,EAAC5C,UAAWqC,IACjC,kBAAC,IAAD,CAAOM,KAAK,WAAW3C,UAAWuC,IAClC,kBAAC,EAAD,CACII,KAAK,aACL3C,UAAWwC,EACXxD,gBAAiBA,EACjBD,YAAaA,U,QCdT8D,QACW,cAA7BlC,OAAOJ,SAASuC,UAEe,UAA7BnC,OAAOJ,SAASuC,UAEhBnC,OAAOJ,SAASuC,SAASC,MACvB,2DCTN,IAAMC,ECJS,SAAwBC,GACnC,IAAMD,EAAQE,YACVC,EACAF,EACAG,YAAgBC,MAGpB,OADAL,EAAMjG,SAASW,eACRsF,EDHGM,GAEdC,IAASrD,OACL,kBAAC,IAAD,CAAU8C,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGV5B,SAASoC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1G,MAAK,SAAA2G,GACJA,EAAaC,gBAEd3G,OAAM,SAAAhB,GACLiB,QAAQjB,MAAMA,EAAMsD,c","file":"static/js/main.d9e7ba50.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCs5b_8kkR5A99v-SFBcvTyPBy9XJn7ApU\",\n    authDomain: \"diagnosify-web.firebaseapp.com\",\n    databaseURL: \"https://diagnosify-web.firebaseio.com\",\n    projectId: \"diagnosify-web\",\n    storageBucket: \"diagnosify-web.appspot.com\",\n    messagingSenderId: \"826476830900\",\n    appId: \"1:826476830900:web:d95a95a1366125f7d2b7e1\",\n    measurementId: \"G-6KX7SFRFFZ\"\n};\n\nexport const myFirebase = firebase.initializeApp(firebaseConfig);\nconst baseDb = myFirebase.firestore();\nexport const db = baseDb;\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\n\n","import {myFirebase} from \"../../firebase/firebase\";\nimport {googleProvider} from \"../../firebase/firebase\";\nimport {\n    LOGIN_FAILURE,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGOUT_FAILURE,\n    LOGOUT_REQUEST,\n    LOGOUT_SUCCESS,\n    VERIFY_REQUEST,\n    VERIFY_SUCCESS,\n    SIGN_UP_SUCCESS,\n    SIGN_UP_REQUEST,\n    SIGN_UP_FAILURE,\n} from \"../constants\";\n\nconst requestLogin = () => {\n    return {\n        type: LOGIN_REQUEST\n    };\n};\n\nconst receiveLogin = user => {\n    return {\n        type: LOGIN_SUCCESS,\n        user\n    };\n};\n\nconst loginError = error => {\n    return{\n        type: LOGIN_FAILURE,\n        error\n    }\n};\n\nconst requestLogout = () => {\n    return {\n        type: LOGOUT_REQUEST\n    };\n};\n\nconst receiveLogout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    };\n};\n\nconst logoutError = error => {\n    return {\n        type: LOGOUT_FAILURE,\n        error\n    };\n};\n\nconst verifyRequest = () => {\n    return {\n        type: VERIFY_REQUEST\n    };\n};\n\nconst verifySuccess = () => {\n    return {\n        type: VERIFY_SUCCESS\n    };\n};\n\nconst requestSignUp = () => {\n  return {\n      type: SIGN_UP_REQUEST\n  }\n};\n\nconst receiveSignUp = user => {\n  return {\n      type: SIGN_UP_SUCCESS,\n      user\n  }\n};\n\nconst signUpError = error => {\n  return {\n      type: SIGN_UP_FAILURE,\n      error\n  }\n};\n\nexport const loginUser = (email, password) => dispatch => {\n    dispatch(requestLogin());\n    myFirebase\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .then(user => {\n            dispatch(receiveLogin(user));\n        })\n        .catch(error => {\n            console.log(error);\n            dispatch(loginError(error));\n        });\n};\n\nexport const logoutUser = () => dispatch => {\n    dispatch(requestLogout());\n    myFirebase\n        .auth()\n        .signOut()\n        .then(() => {\n            dispatch(receiveLogout());\n        })\n        .catch(error => {\n            dispatch(logoutError(error));\n        });\n};\n\nexport const verifyAuth = () => dispatch => {\n    dispatch(verifyRequest());\n    myFirebase.auth().onAuthStateChanged(user => {\n        if (user !== null) {\n            dispatch(receiveLogin(user));\n        }\n        dispatch(verifySuccess());\n    });\n};\n\nexport const signUpUser = (email, password) => dispatch => {\n    dispatch(requestSignUp());\n    myFirebase.auth().createUserWithEmailAndPassword(email, password).then(user => {\n        dispatch(receiveSignUp(user));\n        dispatch(receiveLogin(user));\n    }).catch(error => {\n        dispatch(signUpError(error));\n    });\n};\n\nexport const signInWithGoogle = (type) => dispatch => {\n    if (type === 'signup'){\n        dispatch(requestSignUp());\n        myFirebase.auth().signInWithPopup(googleProvider).then(user => {\n            dispatch(receiveSignUp(user));\n        }).catch(error => {\n            dispatch(signUpError(error));\n        });\n    }else {\n        dispatch(requestLogin());\n        myFirebase.auth().signInWithPopup(googleProvider).then(user => {\n            dispatch(receiveLogout(user));\n        }).catch(error => {\n            dispatch(loginError(error));\n        });\n    }\n\n};\n","import {DISEASE_BOOK, DOCTOR, FEEDBACK, SCAN_HISTORY, TAKE_SCAN} from \"../constants\";\n\n\n//types\n\nconst scan = () => {\n    return {\n        type: TAKE_SCAN\n    }\n}\n\nconst doctor = () => {\n    return {\n        type: DOCTOR\n    }\n}\n\nconst history = () => {\n    return {\n        type: SCAN_HISTORY\n    }\n}\n\nconst diseaseBook = () => {\n    return {\n        type: DISEASE_BOOK\n    }\n}\n\nconst feedback = () => {\n    return {\n        type: FEEDBACK\n    }\n}\n//dispatchers\n\nexport const selectTakeScan = dispatch => {\n    dispatch(scan());\n}\n\nexport const selectDoctor = dispatch => {\n    dispatch(doctor());\n}\n\nexport const selectHistory = dispatch => {\n    dispatch(history());\n}\n\nexport const selectDiseaseBook = dispatch => {\n    dispatch(diseaseBook());\n}\n\nexport const selectFeedback = dispatch => {\n    dispatch(feedback());\n}","export const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const VERIFY_REQUEST = \"VERIFY_REQUEST\";\nexport const VERIFY_SUCCESS = \"VERIFY_SUCCESS\";\n\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\n\n\nexport const TAKE_SCAN = 'TAKE_SCAN';\nexport const DOCTOR = 'DOCTOR';\nexport const SCAN_HISTORY = 'SCAN_HISTORY';\nexport const DISEASE_BOOK = 'DISEASE_BOOK';\nexport const FEEDBACK = 'FEEDBACK';","import {\n    LOGIN_FAILURE,\n    LOGIN_SUCCESS,\n    LOGIN_REQUEST,\n    LOGOUT_FAILURE,\n    LOGOUT_REQUEST,\n    LOGOUT_SUCCESS,\n    VERIFY_REQUEST,\n    VERIFY_SUCCESS,\n    SIGN_UP_SUCCESS,\n    SIGN_UP_REQUEST,\n    SIGN_UP_FAILURE,\n} from \"../constants\";\n\nconst INITIAL_STATE = {\n    isLoggingIn: false,\n    isLoggingOut: false,\n    isVerifying: false,\n    loginError: false,\n    logoutError: false,\n    isAuthenticated: false,\n    user: {},\n    loginErrorMessage: '',\n    isSigningUp: false,\n    signUpError: false,\n    signedUp: false,\n    signUpErrorMessage: '',\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case LOGIN_REQUEST:\n            return {\n                ...state, isLoggingIn: true, loginError: false,\n            };\n        case LOGIN_SUCCESS:\n            return {\n              ...state,isLoggingIn: false, isAuthenticated: true,\n                user: action.user,\n            };\n        case LOGIN_FAILURE:\n            return {\n                ...state, isLoggingIn: false, isAuthenticated: false, loginError: true, loginErrorMessage: action.error.message,\n            };\n        case LOGOUT_REQUEST:\n            return {\n                ...state, isLoggingOut: true, logoutError: false, signUpErrorMessage: '', loginErrorMessage: '',\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...state, isLoggingOut: false, isAuthenticated: false, user: {}, signUpErrorMessage: '', loginErrorMessage: '',\n            };\n        case LOGOUT_FAILURE:\n            return{\n                ...state, isLoggingOut: false, logoutError: true,\n            };\n        case VERIFY_REQUEST:\n            return {\n                ...state,\n                isVerifying: true,\n                verifyingError: false\n            };\n        case VERIFY_SUCCESS:\n            return {\n                ...state,\n                isVerifying: false\n            };\n        case SIGN_UP_REQUEST:\n            return {\n              ...state, isSigningUp: true,  signedUp: false,\n            };\n        case SIGN_UP_SUCCESS:\n            return {\n              ...state, isSigningUp: false, signUpError: false, signedUp: true,\n            };\n        case SIGN_UP_FAILURE:\n            return {\n              ...state, isSigningUp: false, signedUp: false, signUpError: true, signUpErrorMessage: action.error.message,\n            };\n        default:\n            return state\n\n    }\n};\n\nexport default userReducer;","import {DISEASE_BOOK, DOCTOR, FEEDBACK, SCAN_HISTORY, TAKE_SCAN} from \"../constants\";\n\nconst INITIAL_STATE = {\n    screen : 'take-scan'\n}\n\nconst dashboardReducer = (state = {...INITIAL_STATE}, action) => {\n    switch (action.type) {\n        case TAKE_SCAN :\n            return {\n             ...state, screen: 'take-scan'\n            }\n        case DOCTOR :\n            return {\n                ...state, screen: 'my-doctor'\n            }\n        case SCAN_HISTORY :\n            return {\n                ...state, screen: 'scan-history'\n            }\n        case DISEASE_BOOK :\n            return {\n                ...state, screen: 'disease-book'\n            }\n        case FEEDBACK :\n            return {\n                ...state, screen: 'feedback'\n            }\n        default :\n            return state\n    }\n}\n\nexport default dashboardReducer;","import { combineReducers } from \"redux\";\nimport auth from \"./auth\";\nimport dashboard from \"./dashboard.reducer\";\n\nexport default combineReducers({ auth, dashboard});\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({\n                            component: Component,\n                            isAuthenticated,\n                            isVerifying,\n                            ...rest\n                        }) => (\n    <Route\n        {...rest}\n        render={props =>\n            isVerifying ? (\n                <div />\n            ) : isAuthenticated ? (\n                <Component {...props} />\n            ) : (\n                <Redirect\n                    to={{\n                        pathname: \"/welcome\",\n                        state: { from: props.location }\n                    }}\n                />\n            )\n        }\n    />\n);\nexport default ProtectedRoute;","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n\n};","import styled from \"styled-components\";\n\nexport const LoaderWrapper = styled.main`\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n`;\n\nexport const LoaderCircle = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin-right: 15px;\n  background-color: var(--dark-blue);\n`;","import React, {useEffect} from 'react';\nimport {LoaderCircle, LoaderContainer, LoaderWrapper} from \"./loader.style\";\nimport {gsap, Power3} from \"gsap/all\";\n\nconst Loader = () => {\n\n    useEffect(() => {\n        const Loader = document.querySelector('#loader');\n        gsap.from(Loader.children, {duration: .5, yoyo: true, repeat: -1, repeatDelay: 1, opacity: 0, y: -20, ease: Power3.easeOut, stagger: .15})\n    })\n    return (\n        <LoaderWrapper>\n            <LoaderContainer id='loader'>\n                <LoaderCircle/>\n                <LoaderCircle/>\n                <LoaderCircle/>\n                <LoaderCircle/>\n                <LoaderCircle/>\n                <LoaderCircle style={{marginRight: 0}}/>\n            </LoaderContainer>\n        </LoaderWrapper>\n    );\n};\n\nexport default Loader;\n","import React from 'react';\nimport './App.css';\nimport ProtectedRoute from \"./components/protected/ProtectedRoute\";\nimport ScrollToTop from \"./utils/scroll-to-top\";\nimport {connect} from \"react-redux\";\nimport {Switch, Route} from \"react-router-dom\";\nimport { Suspense, lazy } from 'react';\n\nimport Loader from \"./components/loader/loader.component\";\n\nconst Home = lazy(() => import(\"./pages/homepage/homepage\"));\nconst Welcome = lazy(() => import(\"./pages/welcome/welcome\"));\nconst Dashboard = lazy(() => import(\"./pages/dashboard/dashboard\"));\n\n\nfunction App({isAuthenticated, isVerifying}) {\n    return <>\n    <Suspense fallback={<Loader/>}>\n    <ScrollToTop/>\n        <Switch>\n            <Route path=\"/\" exact component={Home}/>\n            <Route path='/welcome' component={Welcome}/>\n            <ProtectedRoute\n                path=\"/dashboard\"\n                component={Dashboard}\n                isAuthenticated={isAuthenticated}\n                isVerifying={isVerifying}\n            />\n        </Switch>\n    </Suspense>\n    </>\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        isAuthenticated: state.auth.isAuthenticated,\n        isVerifying: state.auth.isVerifying\n    };\n}\n\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./configureStore\";\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { verifyAuth } from \"./redux/actions\";\nimport rootReducer from \"./redux/reducers\";\n\nexport default function configureStore(persistedState) {\n    const store = createStore(\n        rootReducer,\n        persistedState,\n        applyMiddleware(thunkMiddleware)\n    );\n    store.dispatch(verifyAuth());\n    return store;\n}"],"sourceRoot":""}